#!python

"""
    Performance testing to find an acceptable K value
"""

import numpy as np 
import pandas as pd
import numcodecs
import zarr
from tqdm import tqdm
import allel
import sys
sys.path.append('src/')
from scipy.spatial.distance import squareform
from gen_ld_mat import est_kxp_mat

# ------- Data Directories ------ # 
DATA_DIR  = '/project2/jnovembre/data/external_public/geo_LD/'
VCF_1KG_DIR = '/project2/jnovembre/data/external_public/1kg_phase3/haps/'

#------ Rules ------ # 
rule random_10MB_CEU:
    """
       Take random 5Mb segment of chromosome 22 for individuals from CEU from filtered 1kGP vcf)
    """
    input:
      vcf =  DATA_DIR + 'ALL.chr22.phase3_shapeit2_mvncall_integrated.20130502.biallelic_snps.ac5.genotypes.vcf.gz'
      vcf_idx = DATA_DIR  + 'ALL.chr22.phase3_shapeit2_mvncall_integrated.20130502.biallelic_snps.ac5.genotypes.vcf.gz.tbi' 
    output:
      ld_mat = 'data/ld_mats/chr22_5MB_popCEU'
    run:
       callset = allel.read_vcf(input.vcf, region='22:20000000-25000000', fields=['calldata/GT','samples','variants/POS'])
       gt = allel.GenotypeArray(callset['calldata/GT'])
       panel_path = VCF_1KG_DIR + 'integrated_call_samples_v3.20130502.ALL.panel'
       panel = pd.read_csv(panel_path, sep='\t', usecols=['sample', 'pop', 'super_pop'])
       ceu_check = (panel['pop']=='CEU')
       ceu_indices = panel[ceu_check].index.values
       ceu_gt = gt.take(ceu_indices,axis=1)
       a = ceu_gt.to_n_alt()
       a = a[~np.all(a==0, axis=1)]
       a = a[~np.all(a==1, axis=1)]
       a = a[~np.all(a==2, axis=1)]
       CEU_LDmat = squareform(allel.rogers_huff_r(a)**2)
       CEU_LDmat = CEU_LDmat.astype('float16')
       zarr.save('chr22_5MB_popCEU',CEU_LDmat)
      
rule gen_CEU_r2_full_matrix:
    input:
       expand('data/ld_mats/chr22_5MB_popCEU')
