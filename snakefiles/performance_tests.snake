#!python

"""
    Performance testing to find an acceptable K value + Attempting to create adaptive-K strategy
"""

import numpy as np 
import pandas as pd
import numcodecs
import zarr
from tqdm import tqdm
import allel
import sys
sys.path.append('src/')
from scipy.spatial.distance import squareform
from gen_ld_mat import est_kxp_mat

# ------- Data Directories ------ # 
DATA_DIR  = '/project2/jnovembre/data/external_public/geo_LD/'
VCF_1KG_DIR = '/project2/jnovembre/data/external_public/1kg_phase3/haps/'

#------ Rules ------ # 

rule filt_biallelic_AC_1kg:
    """
       Filter to biallelic SNPs in the 1000 Genomes Dataset (with a particular
       allele count filter)
    """
    input:
      vcf =  VCF_1KG_DIR + 'ALL.chr{CHROM}.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz'
    output:
      vcf = DATA_DIR  + 'ALL.chr{CHROM}.phase3_shapeit2_mvncall_integrated.20130502.biallelic_snps.ac{AC,\d+}.genotypes.vcf.gz',
      vcf_idx = DATA_DIR  + 'ALL.chr{CHROM}.phase3_shapeit2_mvncall_integrated.20130502.biallelic_snps.ac{AC,\d+}.genotypes.vcf.gz.tbi' 
    shell:
      """
      bcftools view -v snps -m2 -M2 -c {wildcards.AC}:minor {input.vcf} | bgzip -@4 > {output.vcf}    
      tabix -f {output.vcf}
      """
    
rule kxp_select_positions:
    """
       Generate k x p matri for a chosen segment of a particular chromosome for individuals from a certain population 
    """
    input:
      vcf = rules.filt_biallelic_AC_1kg.output.vcf,
      popfile = VCF_1KG_DIR + 'integrated_call_samples_v3.20130502.ALL.panel' 
    output:
      ld_mat = 'data/performance_tests/chr{CHROM}_pos{POS1}_{POS2}_pop{POP}'
    run:
       callset = allel.read_vcf(input.vcf, region='{CHROM}:{POS1}-{POS2}', fields=['calldata/GT','samples','variants/POS'])
       gt = allel.GenotypeArray(callset['calldata/GT'])
       panel = pd.read_csv(input.popfile, sep='\t', usecols=['sample', 'pop', 'super_pop'])
       ceu_check = (panel['pop']=={POP})
       ceu_indices = panel[ceu_check].index.values
       ceu_gt = gt.take(ceu_indices,axis=1)
       a = ceu_gt.to_n_alt()
       a = a[~np.all(a==0, axis=1)]
       a = a[~np.all(a==1, axis=1)]
       a = a[~np.all(a==2, axis=1)]
       CEU_LDmat = squareform(allel.rogers_huff_r(a)**2)
       CEU_LDmat = CEU_LDmat.astype('float16')
       zarr.save(output.ld_mat,CEU_LDmat)
      
rule gen_CEU_r2_full_matrix:
    input:
       expand('data/ld_mats/chr22_5MB_popCEU')
